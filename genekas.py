from deep_translator import GoogleTranslator
import requests
import json
import urllib.parse
import sys
import os


def get_translation(text, source="et", target="en"):
    try:
        return GoogleTranslator(source=source, target=target).translate(text)
    except Exception as e:
        print(f"Translation error: {e}")
        return text


def main():
    if len(sys.argv) > 1:
        inp = sys.argv[1]
    else:
        sys.exit("Missing input")

    varb = f'https://api.sonapi.ee/v2/{inp}'
    response = requests.get(varb)
    
    if response.status_code in (400, 404, 500):
        messages = {
            404: "Vigane sisend",
            400: "S√µna ei leitud",
            500: "Midagi l√§ks rappa"
        }
        sys.exit(messages[response.status_code])

    data = response.json()
    
    try:
        w = data['estonianWord']
        p = data['searchResult'][0]['meanings'][0]['partOfSpeech'][0]['value'].capitalize()
    except (KeyError, IndexError):
        sys.exit("Unexpected data format")

    p_eng_map = {
        "Nimis√µna": "/Noun",
        "Omaduss√µna": "/Adjective",
        "Tegus√µna": "/Verb",
        "M√§√§rs√µna": "/Adverb",
        "Omaduss√µna nimis√µna": "/Adjective & Noun",
        "Sides√µna": "Conjunction",
        "Ases√µna": "Pronoun",
        "Arvs√µna": "Numeral"
    }
    p = p.split(' ', 1)[0]
    p = p.replace(',', '')
    p_eng = p_eng_map.get(p, "")

    filepath = os.path.expanduser(f"~/Documents/Projects/Coding/Genekas/{inp}.txt")
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(f"\n**T√§nane WOTD**\n{w.capitalize()} - {p.capitalize()}{p_eng}\n")
        print(f"\n**T√§nane WOTD**\n{w.capitalize()} - {p.capitalize()}{p_eng}")

        if p in ("Nimis√µna", "Omaduss√µna", "Omaduss√µna nimis√µna"):
            word_forms_dict = {
                form['morphValue']: form['value']
                for form in data['searchResult'][0]['wordForms']
                if form['morphValue'] in [
                    'ainsuse nimetav', 'ainsuse omastav', 'ainsuse osastav',
                    'mitmuse nimetav', 'mitmuse omastav', 'mitmuse osastav'
                ]
            }
            verb_str = (
              word_forms_dict['ainsuse nimetav'] + ', ' + 
              word_forms_dict['ainsuse omastav'] + ', ' + 
              word_forms_dict['ainsuse osastav'] + '; ' + 
              word_forms_dict['mitmuse nimetav'] + ', ' + 
              word_forms_dict['mitmuse omastav'] + ', ' + 
              word_forms_dict['mitmuse osastav'].replace(',', '/')
            )
            f.write(f"*{verb_str}*\n")
            print(f"*{verb_str}*\n")
        
        
        elif p == "Tegus√µna":
            verb_forms_dict = {
                form['morphValue']: form['value']
                for form in data['searchResult'][0]['wordForms']
                if form['morphValue'] in [
                    'ma-infinitiiv e ma-tegevusnimi', 'da-infinitiiv e da-tegevusnimi', 
                    'kindla k√µneviisi oleviku ainsuse 3.p.', 'kindla k√µneviisi lihtmineviku ainsuse 3.p.',
                    'mitmeosalise verbi p√∂√∂ratud ja eitatud nud-kesks√µna', 
                    'mineviku umbisikuline kesks√µna e tud-kesks√µna'
                ]
            }
            verb_str = (
              verb_forms_dict['ma-infinitiiv e ma-tegevusnimi'] + ', ' +
              verb_forms_dict['da-infinitiiv e da-tegevusnimi'] + '; ' +
              verb_forms_dict['kindla k√µneviisi oleviku ainsuse 3.p.'] + ', ' +
              verb_forms_dict['kindla k√µneviisi lihtmineviku ainsuse 3.p.'] + '; ' +
              verb_forms_dict['mitmeosalise verbi p√∂√∂ratud ja eitatud nud-kesks√µna'] + ', ' +
              verb_forms_dict['mineviku umbisikuline kesks√µna e tud-kesks√µna']
            )
            f.write(f"*{verb_str}*\n")
            print(f"*{verb_str}*\n")

        elif p == "M√§√§rs√µna":
            f.write(f"*{w}*\n")
            print(f"*{w}*\n")

        f.write("\n**T√§hendused/Meanings:**\n")
        print("**T√§hendused/Meanings:**")
        meanings = data['searchResult'][0].get('meanings', [])
        all_examples = []
        for i, meaning in enumerate(meanings):
            est_def = f"üá™üá™ **{i + 1}.** {meaning['definition']}"
            eng_def = get_translation(meaning['definition'])
            f.write(f"{est_def}\nüá¨üáß **{i + 1}.** {eng_def}\n")
            print(f"{est_def}\nüá¨üáß **{i + 1}.** {eng_def}")
            examples = meaning.get('examples', [])
            all_examples.extend(examples)

        if all_examples:
            f.write("\n**N√§ited/Examples:**\n")
            print("\n**N√§ited/Examples:**")
            for example in all_examples:
                translation = get_translation(example)
                ex_line = f"‚óè {example} ||{translation}||"
                f.write(ex_line + "\n")
                print(ex_line)

        f.write("\n**S√ºnon√º√ºmid/Synonyms:** \n#\n")
        print("**S√ºnon√º√ºmid/Synonyms:** \n#\n")

        sonaveeb_url = f"https://sonaveeb.ee/search/unif/dlall/dsall/{urllib.parse.quote(w)}/1/est\n"
        f.write("\n**S√µnaveeb:**\n" + sonaveeb_url)
        print("**S√µnaveeb:**\n" + sonaveeb_url)
        f.write("\nPalun √∂elge mulle, kui m√µni t√§hendus puudub v√µi on vale. Kui soovite kirjutada oma lause, tehke seda #wotd_writing.")

if __name__ == "__main__":
    main()

